{"version":3,"sources":["actions/battle.js","helpers/index.js","actions/placement.js","reducers/gameState.js","reducers/placement.js","reducers/rootReducer.js","selectors/gameState.js","selectors/placement.js","components/Cell.jsx","components/Grid.jsx","components/Instructions.jsx","components/App.jsx","components/GameController.jsx","serviceWorker.js","index.js"],"names":["shootLocation","rowIndex","colIndex","type","checkForSinking","attempts","shipLocations","shipSize","shipIndex","forEach","ship","index","startCoordinates","endCoordinates","bigY","smallY","bigX","smallX","width","length","size","row","col","placeShip","side","board","shipSizes","validPlacement","includes","newBoard","map","cell","attemptShipPlacement","createBoard","Array","keys","fill","initialState","gameState","shipSizesLeft","opponentShipSizesLeft","turn","opponentShipLocations","winner","opponentBoard","opponentAttempts","reducer","state","action","Object","assign","slice","isPlayerAttempt","playerAttempts","newRow","splice","sizeIndex","findIndex","item","shipSizesToPlace","opponentShipSizesToPlace","placementStarted","coordinates","isPlayer","ships","shipsLeft","combineReducers","shipPlacement","selectShips","props","selectAttempts","selectShipSizesLeft","selectShipSizesToPlace","mapDispatchToProps","startPlacement","connect","shotFired","hasShip","placing","marker","className","onClick","e","preventDefault","String","fromCharCode","rowHeaders","n","columnHeaders","boardName","charAt","toUpperCase","shipCounter","Fragment","key","columnHeader","rowHeader","columnIndex","React","memo","mainInstruction","description","battlePhase","turnIndicator","sleep","ms","Promise","resolve","setTimeout","GameController","beginBattlePhase","announceVictory","children","simpleAI","a","undefined","start","end","Error","findAvailableShipLocation","simplePlaceShip","propTypes","PropTypes","oneOf","isRequired","arrayOf","number","func","Boolean","window","location","hostname","match","store","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.caebc5dc.chunk.js","sourcesContent":["export const SHOOT_LOCATION = 'SHOOT_LOCATION'\nexport const ANNOUNCE_VICTORY = 'ANNOUNCE_VICTORY'\n\nexport const shootLocation = (rowIndex, colIndex) => ({\n  type: SHOOT_LOCATION,\n  rowIndex,\n  colIndex\n})\n\nexport const announceVictory = (winner) => ({\n  type: ANNOUNCE_VICTORY,\n  winner\n})\n","export const attemptShipPlacement = (board, startCoordinates, endCoordinates, shipSizes) => {\n  let validPlacement = true\n  const bigY = startCoordinates[0] > endCoordinates[0] ? startCoordinates[0] : endCoordinates[0] \n  const smallY = startCoordinates[0] < endCoordinates[0] ? startCoordinates[0] : endCoordinates[0] \n  const bigX = startCoordinates[1] > endCoordinates[1] ? startCoordinates[1] : endCoordinates[1] \n  const smallX = startCoordinates[1] < endCoordinates[1] ? startCoordinates[1] : endCoordinates[1] \n  const width = bigX - smallX + 1\n  const length = bigY - smallY + 1\n  let shipSize\n  // validate shape of ship\n  if (width === 1 && shipSizes.includes(length)) {\n    shipSize = length\n  } else if (length === 1 && shipSizes.includes(width)) {\n    shipSize = width\n  } else {\n    return { newBoard: board, shipSize: 0 }\n  }\n  // write new ship into board or mark as invalid\n  const newBoard = board.map((row, rowIndex) => {\n    if (rowIndex < smallY ||\n      rowIndex > bigY) {\n        return row\n      } else {\n        return row.map((cell, colIndex) => {\n          if (colIndex < smallX ||\n            colIndex > bigX) {\n              return cell\n            } else {\n              if (cell === 1) {\n                validPlacement = false\n                return 1\n              } else {\n                return 1\n              }\n            }\n        })\n      }\n  })\n  if (!validPlacement) {\n    return { newBoard: board, shipSize: 0 }\n  }\n  return { newBoard, shipSize: shipSize }\n}\n\nexport const checkForSinking = (attempts, shipLocations) => {\n  let shipSize = 0\n  let shipIndex = 0\n  shipLocations.forEach((ship, index) => {\n    const startCoordinates = ship[0]\n    const endCoordinates = ship[1]\n    const bigY = startCoordinates[0] > endCoordinates[0] ? startCoordinates[0] : endCoordinates[0] \n    const smallY = startCoordinates[0] < endCoordinates[0] ? startCoordinates[0] : endCoordinates[0] \n    const bigX = startCoordinates[1] > endCoordinates[1] ? startCoordinates[1] : endCoordinates[1] \n    const smallX = startCoordinates[1] < endCoordinates[1] ? startCoordinates[1] : endCoordinates[1] \n    const width = bigX - smallX + 1\n    const length = bigY - smallY + 1\n    const size = width > length ? width : length\n    for (let row = smallY; row <= bigY; row++) {\n      for (let col = smallX; col <= bigX; col++) {\n        if (attempts[row][col] === 0) {\n          return\n        }\n        if (col === bigX && row === bigY && attempts[row][col] === 1) {\n          shipSize = size\n          shipIndex = index\n        }\n      }\n    }\n  })\n  return { shipSize, shipIndex }\n}","import { attemptShipPlacement } from '../helpers'\n\nexport const START_PLACEMENT = 'START_PLACEMENT'\nexport const PLACE_SHIP = 'PLACE_SHIP'\nexport const BEGIN_BATTLE_PHASE = 'BEGIN_BATTLE_PHASE'\n\nexport const startPlacement = (coordinates) => (\n  {\n    type: START_PLACEMENT,\n    coordinates,\n  }\n)\n\nexport const placeShip = (side, board, startCoordinates, endCoordinates, shipSizes) => {\n  const { newBoard, shipSize } = attemptShipPlacement(board, startCoordinates, endCoordinates, shipSizes)\n\n  return ({\n    type: PLACE_SHIP,\n    newBoard,\n    side,\n    shipSize,\n    startCoordinates,\n    endCoordinates,\n  })\n}\n\nexport const beginBattlePhase = () => ({ type: BEGIN_BATTLE_PHASE })\n","import { SHOOT_LOCATION, ANNOUNCE_VICTORY } from '../actions/battle'\nimport { checkForSinking } from '../helpers'\nimport { PLACE_SHIP, BEGIN_BATTLE_PHASE } from '../actions/placement'\n\n// initialize a 10x10 board with all 0s\nconst createBoard = () => ([...Array(10).keys()].map(() => Array(10).fill(0)))\n\nexport const initialState = {\n  gameState: 'placement',\n  shipSizesLeft: [5, 4, 3, 3, 2],\n  opponentShipSizesLeft: [5, 4, 3, 3, 2],\n  turn: 'player',\n  shipLocations: [],\n  opponentShipLocations: [],\n  winner: null,\n  board: createBoard(),\n  opponentBoard: createBoard(),\n  attempts: createBoard(),\n  opponentAttempts: createBoard(),\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case PLACE_SHIP:\n      return Object.assign({},\n        state,\n        action.side === 'player' ? {\n          board: action.newBoard,\n          shipLocations: [\n            ...state.shipLocations.slice(),\n            [action.startCoordinates, action.endCoordinates]\n          ]\n        } : {\n          opponentBoard: action.newBoard,\n          opponentShipLocations: [\n            ...state.opponentShipLocations.slice(),\n            [action.startCoordinates, action.endCoordinates]\n          ]\n        },\n      )\n    case BEGIN_BATTLE_PHASE:\n      return {\n        ...state,\n        gameState: 'battle',\n      }\n    case SHOOT_LOCATION:\n      const isPlayerAttempt = state.turn === 'player'\n      const playerAttempts = isPlayerAttempt ? state.attempts : state.opponentAttempts\n      // immutably update matrix, see docs: https://redux.js.org/recipes/structuring-reducers/immutable-update-patterns#updating-an-item-in-an-array\n      const attempts = playerAttempts.map((row, rowIndex) => {\n        if (rowIndex !== action.rowIndex) {\n          return row\n        }\n        let newRow = row.slice()\n        newRow.splice(action.colIndex, 1, 1);\n        return newRow\n      })\n      let shipLocations = isPlayerAttempt ? state.opponentShipLocations.slice()\n        : state.shipLocations.slice()\n      let shipSizesLeft = isPlayerAttempt ? state.opponentShipSizesLeft.slice()\n        : state.shipSizesLeft.slice()\n      const { shipSize, shipIndex } = checkForSinking(attempts, shipLocations)\n      if (shipSize > 0) {\n        shipLocations.splice(shipIndex, 1)\n        const sizeIndex = shipSizesLeft.findIndex((item) => item === shipSize)\n        shipSizesLeft.splice(sizeIndex, 1)\n      }\n\n      return Object.assign({},\n        state, \n        state.turn === 'player' ? {\n          turn: 'opponent',\n          attempts,\n          opponentShipLocations: shipLocations,\n          opponentShipSizesLeft: shipSizesLeft,\n        } : {\n          turn: 'player',\n          opponentAttempts: attempts,\n          shipLocations,\n          shipSizesLeft,\n        }\n      )\n    case ANNOUNCE_VICTORY:\n      return {\n        ...state,\n        gameState: 'complete',\n        winner: action.winner\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer;\n","import { START_PLACEMENT, PLACE_SHIP } from '../actions/placement'\n\nexport const initialState = {\n  shipSizesToPlace: [5, 4, 3, 3, 2],\n  opponentShipSizesToPlace: [5, 4, 3, 3, 2],\n  placementStarted: false,\n  startCoordinates: null,\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case START_PLACEMENT:\n      return {\n        ...state,\n        placementStarted: true,\n        startCoordinates: action.coordinates\n      }\n    case PLACE_SHIP:\n      const isPlayer = action.side === 'player'\n      const ships = isPlayer ? state.shipSizesToPlace : state.opponentShipSizesToPlace\n      const index = ships.findIndex((item) => item === action.shipSize);\n      const shipsLeft = ships.slice()\n      if (index !== -1) {\n        shipsLeft.splice(index, 1)\n      }\n      return Object.assign({},\n        state,\n        isPlayer ? {\n          placementStarted: false,\n          startCoordinates: null,\n          shipSizesToPlace: shipsLeft\n        } : {\n          opponentShipSizesToPlace: shipsLeft\n        }\n      )\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","import { combineReducers } from 'redux'\nimport gameState from './gameState'\nimport shipPlacement from './placement'\n\nexport default combineReducers({\n  gameState,\n  shipPlacement\n})","export const selectShips = (state, props) => (\n  props.side === 'player' ? state.gameState.board : state.gameState.opponentBoard\n)\n\nexport const selectAttempts = (state, props) => (\n  props.side === 'player' ? state.gameState.opponentAttempts : state.gameState.attempts\n)\n\nexport const selectShipSizesLeft = (state, props) => (\n  props.side === 'player' ? state.gameState.shipSizesLeft : state.gameState.opponentShipSizesLeft\n)\n","export const selectShipSizesToPlace = (state, props) => (\n  props.side === 'player' ? state.shipPlacement.shipSizesToPlace\n    : state.shipPlacement.opponentShipSizesToPlace\n)","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { shootLocation } from '../actions/battle'\nimport { selectShips, selectAttempts } from '../selectors/gameState'\nimport { selectShipSizesToPlace } from '../selectors/placement'\nimport { startPlacement, placeShip } from '../actions/placement'\nimport './Cell.css'\n\n/**\n * Cell component displaying status of grid location (hit, miss, or unknown)\n * \n * @param gameState - Current phase of the game (placement, battle, complete)\n * @param side - Identifies if cell is on player or opponent board\n * @param turn - Identifies player or opponent turn\n * @param row - Row index of cell\n * @param col - Column index of cell\n * @param ships - Matrix with 1 for ship locations, 0 for empty\n * @param attempts - Matrix with 1 for shots fired, 0 for not fired\n * @param shootLocation - Action to fire at cell location\n * @param startPlacement - Set start coordinates for ship placement\n * @param placementStarted - Identifies if ship is being placed\n * @param startCoordinates - Identifies ship starting point\n * @param placeShip - Action to place a ship between coordinates\n * @param shipSizesLeft - Array of possible ship sizes to place\n */\nconst Cell = (props) => {\n  const {\n    gameState,\n    side,\n    turn,\n    row,\n    col,\n    ships,\n    attempts,\n    shootLocation,\n    placementStarted,\n    startPlacement,\n    startCoordinates,\n    placeShip,\n    shipSizesToPlace\n  } = props\n  const shotFired = attempts[row][col] === 1\n  const hasShip = ships[row][col] === 1\n  const placing = side === 'player' && startCoordinates &&\n    row === startCoordinates[0] && col === startCoordinates[1]\n    ? 'placing' : null\n  const marker = !shotFired ? null\n    : hasShip ? 'hit'\n    : 'miss'\n  const ship = side === 'player' && hasShip ? 'ship' : null\n  \n  const handleClick = (e) => {\n    e.preventDefault()\n    switch (gameState) {\n      case 'placement':\n        if (side === 'opponent') {\n          return\n        }\n        if (!placementStarted) {\n          if (!hasShip) {\n            startPlacement([row, col])\n          }\n        } else {\n          placeShip(side, ships, startCoordinates, [row, col], shipSizesToPlace)\n        }\n        return\n      case 'battle':\n        if (!marker && side === 'opponent' && turn === 'player') {\n          shootLocation(row, col)\n        }\n        return\n      default:\n        return\n    }\n  }\n  \n\n  return (\n    <td className={`${marker || ship || placing}`} onClick={handleClick}>\n      <div className='cell' >\n        ({String.fromCharCode(col + 65)}, {row + 1})\n      </div>\n    </td>\n    \n  )\n}\n\nCell.propTypes = {\n  gameState: PropTypes.oneOf(['placement', 'battle', 'complete']).isRequired,\n  side: PropTypes.oneOf(['player', 'opponent']).isRequired,\n  turn: PropTypes.oneOf(['player', 'opponent']).isRequired,\n  row: PropTypes.number.isRequired,\n  col: PropTypes.number.isRequired,\n  ships: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)).isRequired,\n  attempts: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)).isRequired,\n  shootLocation: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state, props) => ({\n  gameState: state.gameState.gameState,\n  turn: state.gameState.turn,\n  ships: selectShips(state, props),\n  attempts: selectAttempts(state, props),\n  placementStarted: state.shipPlacement.placementStarted,\n  startCoordinates: state.shipPlacement.startCoordinates,\n  shipSizesToPlace: selectShipSizesToPlace(state, props)\n})\n\nconst mapDispatchToProps = {\n  shootLocation,\n  startPlacement,\n  placeShip,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cell);\n","import React from 'react'\nimport Cell from './Cell'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { selectShipSizesLeft } from '../selectors/gameState'\nimport { selectShipSizesToPlace } from '../selectors/placement'\nimport './Grid.css'\n\n/**\n * A Grid component which displays a Battleship game board\n * \n * @param shipSizesLeft - Array indicating ship sizes not sunk\n * @param shipSizesToPlace - Array indicating ship sizes to place\n * @param side - Identifies player or opponent board\n * @param gameState - Current phase of the game (placement, battle, complete)\n */\nconst Grid = ({ side, shipSizesLeft, gameState, shipSizesToPlace }) => {\n  const rowHeaders = [...Array(10).keys()].map(n => n+1) // 1 through 10\n  const columnHeaders = [...Array(10).keys()].map(n => String.fromCharCode(n + 65)) // A through J\n\n  const renderColumnHeaders = () => (\n    <tr>\n      <th className='header' />\n        {\n          columnHeaders.map(columnHeader => (\n            <th className='header' key={columnHeader}>\n              <div className='tableContent'>\n                {columnHeader}\n              </div>\n            </th>\n          ))\n        }\n    </tr>\n  )\n\n  const renderRows = () => (\n    rowHeaders.map((rowHeader, rowIndex) => (\n      <tr key={rowHeader}>\n        <td className='header'>{rowHeader}</td>\n        {\n          columnHeaders.map((columnHeader, columnIndex) => (\n            <Cell\n              key={`${columnHeader}${rowHeader}`}\n              className='tableContent'\n              row={rowIndex}\n              col={columnIndex}\n              side={side}\n            /> \n          ))\n        }\n      </tr>\n    ))\n  )\n  const boardName = `${side.charAt(0).toUpperCase() + side.slice(1)}'s board`\n  const shipCounter = gameState === 'placement'\n    ? shipSizesToPlace.length > 0\n      ? `Ship sizes left to place: [${shipSizesToPlace}]`\n      : 'Ready!'\n    : gameState === 'battle'\n      ? `Ship sizes left to sink: [${shipSizesLeft}]`\n      : null\n\n  return (\n    <React.Fragment key={side}>\n      <h2>{boardName}</h2>\n      <p>{shipCounter}</p>\n      <table className='container'>\n        <thead>\n          {renderColumnHeaders()}\n        </thead>\n        <tbody>\n          {renderRows()}\n        </tbody>\n      </table>\n    </React.Fragment>\n  )\n}\n\nconst mapStateToProps = (state, props) => ({\n  shipSizesLeft: selectShipSizesLeft(state, props),\n  gameState: state.gameState.gameState,\n  shipSizesToPlace: selectShipSizesToPlace(state, props)\n})\n\nGrid.propTypes = {\n  side: PropTypes.oneOf(['player', 'opponent']).isRequired,\n  shipSizesLeft: PropTypes.arrayOf(PropTypes.number).isRequired,\n  gameState: PropTypes.oneOf(['placement', 'battle', 'complete']).isRequired,\n}\n\nexport default connect(mapStateToProps)(Grid);\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\n/**\n * Instructions explaining how to play the game\n * \n * @param gameState - State of the game (placement, battle, complete)\n * @param winner - Who won? \n */\nconst Instructions = ({ gameState, winner }) => {\n  let mainInstruction, description;\n  switch (gameState) {\n    case 'placement':\n      mainInstruction = 'Place Your Ships!'\n      // eslint-disable-next-line no-multi-str\n      description = 'Click a cell to start placing a ship. Your ship must be placed vertically \\\n        or horizontally. The battle will begin when both players have placed all their ships!'\n      break\n    case 'battle':\n      mainInstruction = 'Defend The Bay!'\n      // eslint-disable-next-line no-multi-str\n      description = 'Click on the opponent\\'s cells to fire your attack. Cells where ships were hit will \\\n        be marked red. Cells where attacks missed will be marked white.'\n      break\n    default:\n      if (winner === 'player') {\n        mainInstruction = 'You Win!'\n      } else {\n        mainInstruction = 'You Lose!'\n      }\n  }\n\n  return (\n    <React.Fragment>\n      <h2>{mainInstruction}</h2>\n      <p>{description}</p>\n    </React.Fragment>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  gameState: state.gameState.gameState,\n  winner: state.gameState.winner,\n})\n\nInstructions.propTypes = {\n  gameState: PropTypes.oneOf(['placement', 'battle', 'complete']).isRequired,\n  winner: PropTypes.oneOf(['player', 'opponent']),\n}\n\nexport default connect(mapStateToProps)(\n  React.memo(Instructions)\n)\n","import React from 'react'\nimport Grid from './Grid'\nimport Instructions from './Instructions'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport './App.css'\n\n/**\n * Page component holding game display\n * @param turn - Player or computer turn to move\n * @param gameState - Current phase of the game (placement, battle, complete)\n */\nconst App = ({ turn, gameState }) => {\n  const battlePhase = gameState === 'battle'\n  const turnIndicator = turn === 'player'\n  return (\n    <div className='container'>\n      <div className='titleSection'>\n        <h1>Battleship</h1>\n        <p>by Jason Lan</p>\n      </div>\n      <Instructions />\n      <div className='gameContainer'>\n        <div className={`screen ${battlePhase ? turnIndicator ? 'active' : 'inActive': null}`}>\n          <Grid side='opponent'/>\n        </div>\n        <div className={`screen ${battlePhase ? turnIndicator ? 'inActive' : 'active': null}`}>\n          <Grid side='player'/>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  turn: state.gameState.turn,\n  gameState: state.gameState.gameState,\n})\n\nApp.propTypes = {\n  turn: PropTypes.oneOf(['player', 'opponent']).isRequired,\n  gameState: PropTypes.oneOf(['placement', 'battle', 'complete']).isRequired,\n}\n\nexport default connect(mapStateToProps)(App)\nexport { App }\n","import React from 'react' // eslint-disable-line no-unused-vars\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { shootLocation, announceVictory } from '../actions/battle'\nimport { placeShip, beginBattlePhase } from '../actions/placement'\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Component holding AI and game logic\n * \n * @param turn - Player or computer turn to move\n * @param gameState - Current phase of the game (placement, battle, complete)\n * @param opponentBoard - Opponent's board\n * @param opponentAttempts - Opponent's attempts\n * @param shootLocation - Fire at cell location\n * @param shipSizesToPlace - Player's ships to place\n * @param opponentShipSizesToPlace - Opponent's ships to place\n * @param placeShip - Set ship coordinates\n * @param shipLocations - Array of start and end coordinates of player ships\n * @param opponentShipLocations - Array of start and end coordinates of opponent ships\n * @param shipSizesLeft - Array of unsunk player ship sizes\n * @param opponentShipSizesLeft - Array of unsunk opponent ship sizes\n * @param beginBattlePhase - Set gameState to battle phase\n * @param announceVictory - Set gameState to complete\n * @param children - The rendered app\n */\nconst GameController = (props) => {\n  const {\n    turn,\n    gameState,\n    opponentAttempts,\n    shipSizesLeft,\n    opponentShipSizesLeft,\n    opponentBoard,\n    shootLocation,\n    shipSizesToPlace,\n    opponentShipSizesToPlace,\n    placeShip,\n    beginBattlePhase,\n    announceVictory,\n    children\n  } = props\n  \n  const findAvailableShipLocation = (board, size) => {\n    let start\n    let end\n    for (let rowIndex = 0; rowIndex < board.length; rowIndex++) {\n      const row = board[rowIndex]\n      if (row[0] === 1) {\n        continue\n      }\n      for (let colIndex = 0; colIndex < size; colIndex++) {\n        if (row[colIndex] === 1) {\n          break\n        }\n        if (colIndex === size - 1) {\n          start = [rowIndex, 0]\n          end = [rowIndex, colIndex]\n          return { start, end }\n        }\n      }\n    }\n    throw new Error('AI could not place ship')\n  }\n\n  const simplePlaceShip = () => {\n    const size = opponentShipSizesToPlace[0]\n    if (size !== undefined) {\n      const { start, end } = findAvailableShipLocation(opponentBoard, size)\n      placeShip('opponent', opponentBoard, start, end, opponentShipSizesToPlace)\n    }\n  }\n\n  const checkPlacement = () => {\n    if (shipSizesToPlace.length === 0 && opponentShipSizesToPlace.length === 0) {\n      beginBattlePhase()\n    }\n  }\n\n  const checkForVictory = () => {\n    if (shipSizesLeft.length === 0) {\n      announceVictory('opponent')\n      return true\n    } else if (opponentShipSizesLeft.length === 0) {\n      announceVictory('player')\n      return true\n    }\n    return false\n  }\n\n  // Make a move for AI during opponent's turn\n  const simpleAI = async () => {\n    if (turn === 'opponent') {\n      // fire for opponent (first unattempted location)\n      let rowIndex, colIndex;\n      for (rowIndex = 0; rowIndex < opponentAttempts.length; rowIndex++) {\n        let row = opponentAttempts[rowIndex]\n        for (colIndex = 0; colIndex < row.length; colIndex++) {\n          if (row[colIndex] === 0) {\n            // pause half a second for thinking...\n            await sleep(500)\n            shootLocation(rowIndex, colIndex)\n            return\n          }\n        }\n      }\n    }\n  }\n\n  // eslint-disable-next-line default-case\n  switch (gameState) {\n    case 'placement':\n      simplePlaceShip()\n      checkPlacement()\n      break\n    case 'battle':\n      if (!checkForVictory()) {\n        simpleAI()\n      }\n  }\n\n  return children\n}\n\n\nconst mapStateToProps = (state) => ({\n  turn: state.gameState.turn,\n  opponentBoard: state.gameState.opponentBoard,\n  opponentAttempts: state.gameState.opponentAttempts,\n  gameState: state.gameState.gameState,\n  shipSizesToPlace: state.shipPlacement.shipSizesToPlace,\n  opponentShipSizesToPlace: state.shipPlacement.opponentShipSizesToPlace,\n  shipLocations: state.gameState.shipLocations,\n  opponentShipLocations: state.gameState.opponentShipLocations,\n  shipSizesLeft: state.gameState.shipSizesLeft,\n  opponentShipSizesLeft: state.gameState.opponentShipSizesLeft,\n})\n\nconst mapDispatchToProps = {\n  shootLocation,\n  placeShip,\n  beginBattlePhase,\n  announceVictory,\n}\n\nGameController.propTypes = {\n  turn: PropTypes.oneOf(['player', 'opponent']).isRequired,\n  gameState: PropTypes.oneOf(['placement', 'battle', 'complete']).isRequired,\n  opponentBoard: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)).isRequired,\n  opponentAttempts: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)).isRequired,\n  shipSizesToPlace: PropTypes.arrayOf(PropTypes.number).isRequired,\n  opponentShipSizesToPlace: PropTypes.arrayOf(PropTypes.number).isRequired,\n  shipLocations: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n  opponentShipLocations: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n  shipSizesLeft: PropTypes.arrayOf(PropTypes.number).isRequired,\n  opponentShipSizesLeft: PropTypes.arrayOf(PropTypes.number).isRequired,\n  shootLocation: PropTypes.func.isRequired,\n  announceVictory: PropTypes.func.isRequired,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameController);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers/rootReducer'\nimport App from './components/App.jsx'\nimport GameController from './components/GameController.jsx'\nimport * as serviceWorker from './serviceWorker'\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <GameController>\n      <App />\n    </GameController>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}